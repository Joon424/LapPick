<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC
        "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="mini.mapper.MemberMapper">


  <!-- 아이디 중복 -->
    <select id="memberIdExists" parameterType="string" resultType="int">
        SELECT COUNT(*) FROM members WHERE member_id = #{memberId}
    </select>

 <!-- 신규 등록 (이미 올려둔 selectKey 방식 유지) -->
    <insert id="memberInsert" parameterType="memberDTO">
        <selectKey keyProperty="memberNum" resultType="string" order="BEFORE">
            SELECT 'mem_' || TO_CHAR(MEMBER_SEQ.NEXTVAL) FROM dual
        </selectKey>
        INSERT INTO members(
          MEMBER_NUM, MEMBER_NAME, MEMBER_ID, MEMBER_PW,
          MEMBER_ADDR, MEMBER_ADDR_DETAIL, MEMBER_POST,
          MEMBER_REGIST, GENDER, MEMBER_PHONE1,
          MEMBER_PHONE2, MEMBER_EMAIL, MEMBER_BIRTH
        ) VALUES (
          #{memberNum}, #{memberName}, #{memberId}, #{memberPw},
          #{memberAddr}, #{memberAddrDetail}, #{memberPost},
          SYSDATE, #{gender}, #{memberPhone1},
          #{memberPhone2}, #{memberEmail}, #{memberBirth}
        )
    </insert>


<sql id="memberBaseColumns">
		MEMBER_NUM, MEMBER_NAME, MEMBER_ID, MEMBER_PW
	  , MEMBER_ADDR, MEMBER_ADDR_DETAIL, MEMBER_POST
	  , MEMBER_REGIST, GENDER,MEMBER_PHONE1, MEMBER_PHONE2
	  , MEMBER_EMAIL, MEMBER_BIRTH, MEMBER_EMAIL_CONF 
</sql>

<!-- 검색 + 페이징 -->
<select id="memberSelectList" parameterType="startEndPageDTO" resultType="memberDTO">
  SELECT * FROM (
    SELECT ROW_NUMBER() OVER (ORDER BY member_regist DESC) AS rn,
           MEMBER_NUM, MEMBER_NAME, MEMBER_ID, MEMBER_PW,
           MEMBER_ADDR, MEMBER_ADDR_DETAIL, MEMBER_POST,
           MEMBER_REGIST, GENDER, MEMBER_PHONE1, MEMBER_PHONE2,
           MEMBER_EMAIL, MEMBER_BIRTH, MEMBER_EMAIL_CONF
    FROM members
    <where>
      <if test="searchWord != null and searchWord != ''">
        (
          LOWER(MEMBER_NAME) LIKE '%' || LOWER(#{searchWord}) || '%'
          OR LOWER(MEMBER_ID)   LIKE '%' || LOWER(#{searchWord}) || '%'
        )
      </if>
    </where>
  )
  WHERE rn BETWEEN #{startRow} AND #{endRow}
</select>

<!-- 검색어 반영 카운트 -->
<select id="memberCountBySearch" resultType="int">
  SELECT COUNT(*)
  FROM members
  <where>
    <if test="searchWord != null and searchWord != ''">
      (
        LOWER(MEMBER_NAME) LIKE '%' || LOWER(#{searchWord}) || '%'
        OR LOWER(MEMBER_ID)   LIKE '%' || LOWER(#{searchWord}) || '%'
      )
    </if>
  </where>
</select>
    <!-- 목록 (검색 + 페이징) -->
    <select id="memberList" parameterType="map" resultType="memberDTO">
    SELECT *
    FROM (
        SELECT ROW_NUMBER() OVER (ORDER BY member_regist DESC) AS rn,
               MEMBER_NUM, MEMBER_NAME, MEMBER_ID, MEMBER_PW,
               MEMBER_ADDR, MEMBER_ADDR_DETAIL, MEMBER_POST,
               MEMBER_REGIST, GENDER, MEMBER_PHONE1,
               MEMBER_PHONE2, MEMBER_EMAIL, MEMBER_BIRTH, MEMBER_EMAIL_CONF
        FROM members
        <where>
            <if test="searchWord != null and searchWord != ''">
                AND (
                    LOWER(member_name) LIKE '%' || LOWER(#{searchWord}) || '%'
                    OR LOWER(member_id)   LIKE '%' || LOWER(#{searchWord}) || '%'
                )
            </if>
        </where>
    )
    WHERE rn BETWEEN #{startRow} AND #{endRow}
</select>


<select resultType="memberDTO" id="memberSelectOne" parameterType="string" >
	select <include refid="memberBaseColumns" />
	from members
	where member_num = #{memberNum}
</select>

<update id="memberUpdate" parameterType="memberDTO">
  update members
  <trim prefix="set" suffixOverrides=",">
    member_Name = #{memberName},
    member_ADDR = #{memberAddr},
    <if test="memberAddrDetail != null">
      member_Addr_Detail = #{memberAddrDetail},
    </if>
    <if test="memberAddrDetail == null">
      member_Addr_Detail = null,
    </if>
    member_Post = #{memberPost},
    gender = #{gender},
    member_Phone1 = #{memberPhone1},
    member_Email = #{memberEmail},
    <!-- ✅ 추가: 이메일 인증여부 컬럼 반영 -->
    member_email_conf = #{memberEmailConf},
    member_Birth = #{memberBirth},
    <choose>
      <when test="memberPhone2 != null">
        member_Phone2 = #{memberPhone2},
      </when>
      <when test="memberPhone2 == null">
        member_Phone2 = null,
      </when>
    </choose>
  </trim>
  where MEMBER_NUM = #{memberNum}
</update>


<delete id="memberDelete">
  delete from members
  where member_num in
  <foreach collection="nums" item="num" open="(" separator="," close=")">
    #{num}
  </foreach>
</delete>

<!-- 단건 삭제 -->
<delete id="memberDeleteOne" parameterType="string">
  DELETE FROM members WHERE member_num = #{memberNum}
</delete>

<!-- 다건 삭제 -->
<delete id="memberDeleteMany" parameterType="list">
  DELETE FROM members
  WHERE member_num IN
  <foreach collection="nums" item="n" open="(" separator="," close=")">
    #{n}
  </foreach>
</delete>

<!-- 로그인 아이디로 해시 비밀번호 조회 (본인 탈퇴용) -->
<select id="selectPwById" parameterType="string" resultType="string">
  select member_pw
  from members
  where member_id = #{memberId}
</select>

<update id="memberEmailCheckUpdate" parameterType="string">
	update members
	set MEMBER_EMAIL_CONF = 'Y'
	where member_email = #{memberEmail} and MEMBER_EMAIL_CONF is null
</update>
<select id="memberNumSelect" parameterType="string" resultType="string">
	select member_num from members where member_id = #{memberId}
</select>

<select id="existsByMemberId" parameterType="string" resultType="int">
  SELECT COUNT(*) FROM members WHERE member_id = #{memberId}
</select>

<select id="selectMemberById" parameterType="string" resultType="memberDTO">
    select <include refid="memberBaseColumns" />
    from members
    where member_id = #{memberId}
</select>

<update id="memberPwUpdate" parameterType="memberDTO">
    update members
    set member_pw = #{memberPw}
    where member_id = #{memberId}
</update>

    <select id="selectAllMembers" resultType="mini.domain.MemberDTO">
        SELECT MEMBER_ID AS "memberId", MEMBER_PW AS "memberPw" 
        FROM MEMBER
    </select>
    
    <update id="updatePassword" parameterType="mini.domain.MemberDTO">
        UPDATE MEMBER
        SET MEMBER_PW = #{memberPw}
        WHERE MEMBER_ID = #{memberId}
    </update>

<select id="selectOneById" parameterType="string" resultType="mini.domain.MemberDTO">
    SELECT
        MEMBER_NUM as memberNum,
        MEMBER_ID as memberId,
        MEMBER_PW as memberPw,
        MEMBER_NAME as memberName,
        MEMBER_PHONE1 as memberPhone1,
        MEMBER_PHONE2 as memberPhone2,
        MEMBER_ADDR as memberAddr,
        MEMBER_ADDR_DETAIL as memberAddrDetail,
        MEMBER_POST as memberPost,
        GENDER as gender,
        MEMBER_EMAIL as memberEmail,
        MEMBER_BIRTH as memberBirth,
        MEMBER_REGIST as memberRegist,
        MEMBER_EMAIL_CONF as memberEmailConf
    FROM
        MEMBERS
    WHERE
        MEMBER_ID = #{memberId}
</select>

</mapper>







